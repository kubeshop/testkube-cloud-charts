# Default values for testkube-ai-service.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

global:
  # TODO(emil): add the custom CA mounting
  # -- Custom CA to use as a trusted CA during TLS connections. Specify a secret with the PEM encoded CA under the key specified by customCaSecretKey.
  customCaSecretRef: ""
  # -- Custom CA to use as a trusted CA during TLS connections. Specify a key for the secret specified under customCaSecretRef.
  customCaSecretKey: "ca.crt"
  # TODO(emil): add image pull secrets
  # -- Global image pull secrets (provided usually by a parent chart like testkube-enterprise)
  imagePullSecrets: []
  # TODO(emil): add image registry
  # -- Global image registry to be prepended for to all images (usually defined in parent chart)
  imageRegistry: ""
  # TODO(emil): add the common labels
  # -- Common labels which will be added to all resources
  labels: {}
  # TODO(emil): add the container security contexts
  # -- Global security Context for all containers
  containerSecurityContext: {}
  # TODO(emil): add the pod security contexts
  # -- Global security Context for all pods
  podSecurityContext: {}
replicaCount: 1
env: "production"
logLevel: "info"
oidcConfigurationUrl: "http://dex.auth:5556/idp/.well-known/openid-configuration"
oauthIssuer: ""
oauthJwksUri: ""
oauthAudience: "testkube-cloud"
origins: "*"
originsRegex: "https://.*\\.testkube\\..*"
image:
  repository: kubeshop/testkube-ai-copilot
  pullPolicy: IfNotPresent
  tag: ""
imagePullSecrets: []
nameOverride: ""
fullnameOverride: "api"
# Configuration for LangChain tracing
langchain:
  # -- Enable LangChain tracing
  tracing: true
  # -- Endpoint for LangChain API
  endpoint: "https://api.smith.langchain.com/"
  # -- LangChain API Key - can be provided directly or referenced from a secret
  apiKey: ""
  # -- Reference to the secret containing the LangChain API Key (`LANGCHAIN_API_KEY`)
  secretRef: "testkube-ai"
  # -- Project identifier for LangChain
  project: "testkube-dev"
serviceAccount:
  create: true
  automount: true
  annotations: {}
  name: ""
podAnnotations: {}
podLabels: {}
podSecurityContext: {}
securityContext: {}
service:
  # -- Service type
  type: ClusterIP
  # -- Additional annotations to add to the Service resource
  annotations: {}
  # -- Additional labels to add to the Service resource
  labels: {}
  # -- AI API port
  port: 9090
tls:
  # -- Toggle should the Application terminate TLS instead of the Ingress
  serveHTTPS: true
  # -- TLS secret name which contains the certificate files
  tlsSecret: testkube-ai-tls
  certManager:
    # -- Certificate Issuer kind (only used if `provider` is set to `cert-manager`)
    issuerKind: ClusterIssuer
    # -- Certificate Issuer group (only used if `provider` is set to `cert-manager`)
    issuerGroup: cert-manager.io
ingress:
  enabled: true
  className: "nginx"
  annotations: {}
resources: {}
livenessProbe:
  httpGet:
    path: /
    # TODO(emil): does this work with tls at the pod?
    port: http
readinessProbe:
  httpGet:
    path: /
    # TODO(emil): does this work with tls at the pod?
    port: http
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
volumes: []
volumeMounts: []
nodeSelector: {}
tolerations: []
affinity: {}
# -- Hostname for which to create rules and TLS certificates (if omitted, the host will be generated using the global subdomain and `domain` values)
host: ""
