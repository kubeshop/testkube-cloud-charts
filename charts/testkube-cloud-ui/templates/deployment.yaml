apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "testkube-cloud-ui.fullname" . }}
  labels:
    {{- include "testkube-cloud-ui.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "testkube-cloud-ui.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "testkube-cloud-ui.selectorLabels" . | nindent 8 }}
    spec:
      {{- with (default .Values.imagePullSecrets .Values.global.imagePullSecrets) }}
      imagePullSecrets:
        {{- range . }}
        {{- if typeIsLike "map[string]interface {}" . }}
      - name: {{ .name | quote }}
        {{- else }}
      - name: {{ . | quote  }}
        {{- end }}
        {{- end }}
        {{- end }}
      {{- with .Values.topologySpreadConstraints }}
      topologySpreadConstraints:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if .Values.priorityClassName }}
      priorityClassName: {{ .Values.priorityClassName | quote }}
      {{- end }}
      serviceAccountName: {{ include "testkube-cloud-ui.serviceAccountName" . }}
      securityContext: {{ include "testkube-cloud-ui.podSecurityContext" . | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext: {{ include "testkube-cloud-ui.containerSecurityContext" . | nindent 12 }}
          image: {{ include "testkube-dashboard.image" . }}
          imagePullPolicy: {{ .Values.global.imagePullPolicy | default .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          env:
            - name: FEATURE_INSIGHTS_V2
              value: "true"
            - name: FEATURE_AUTH_WITH_CODE
              value: "true"
            - name: REACT_APP_API_SERVER_ENDPOINT
              value: {{ if .Values.ui.apiServerEndpoint}}{{ .Values.ui.apiServerEndpoint }}{{ else }}https://{{ .Values.global.restApiSubdomain }}.{{ .Values.global.domain }}{{ end }}
            {{- if .Values.ui.wsServerEndpoint }}
            - name: REACT_APP_WS_SERVER_ENDPOINT
              value: {{ .Values.ui.wsServerEndpoint }}
            {{- end }}
            - name: REACT_APP_API_ROOT_ROUTE
              value: {{ if .Values.ui.rootRoute}}{{ tpl .Values.ui.rootRoute $ }}{{ else }}https://{{ .Values.global.uiSubdomain }}.{{ .Values.global.domain }}{{ end }}
            {{- if .Values.ui.authStrategy }}
            - name: REACT_APP_AUTH_STRATEGY
              value: {{ .Values.ui.authStrategy }}
            {{- end }}
            {{- if .Values.ai.enabled }}
            - name: TK_AI_URI
              value: {{ if .Values.ai.aiServiceApiUri }}{{ .Values.ai.aiServiceApiUri }}{{ else }}https://{{ .Values.global.aiApiSubdomain }}.{{ .Values.global.domain }}{{ end }}
            {{- end }}
            {{- if .Values.sentry.enabled }}
            - name: REACT_APP_SENTRY_KEY
              {{- if .Values.sentry.secretRef }}
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.sentry.secretRef }}
                  key: "SENTRY_KEY"
              {{- else }}
              value: "{{ .Values.sentry.url }}"
              {{- end }}
            {{- end }}
            {{- if .Values.ui.disableTelemetry }}
            - name: REACT_APP_DISABLE_TELEMETRY
              value: "true"
            {{- end }}
            {{- range $k, $v := .Values.additionalEnv }}
            - name: {{ $k }}
              value: {{ tpl ($v | toString) $ | quote }}
            {{- end}}
            {{- if .Values.externalSecrets.enabled -}}
            {{- range $key, $value := .Values.externalSecrets.keys }}
            - name: {{ $value }}
              valueFrom:
                secretKeyRef:
                  key: {{ $value }}
                  name: ui-external-secrets
            {{ end }}
            {{- end}}
          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /
              port: http
          volumeMounts:
            - mountPath: /etc/nginx
              name: nginx
            - mountPath: /usr/share/nginx/html
              name: html
            - mountPath: /tmp
              name: tmp
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
        - emptyDir: {}
          name: nginx
        - emptyDir: {}
          name: html
        - emptyDir: {}
          name: tmp
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
