# Default values for testkube-cloud-ui.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

global:
  # -- Toggle whether UI is installed in Enterprise mode
  enterpriseMode: false
  # -- Domain under which to create Ingress rules
  domain: ""
  # -- UI subdomain which get prepended to the domain
  uiSubdomain: "cloud"
  # -- Different UI subdomain which gets prepended to the domain. May be used for the redirect from your actual uiSubdomain endpoint. Works is ingressRedirect option is enabled.
  redirectSubdomain: "app"
  # -- REST API subdomain
  restApiSubdomain: "api"
  # -- AI API subdomain which get prepended to the domain
  aiApiSubdomain: "ai"
  # -- TLS provider (possible values: "", "cert-manager")
  certificateProvider: ""
  certManager:
    # -- Certificate Issuer ref (only used if `provider` is set to `cert-manager`)
    issuerRef: ""
  # -- Global image pull secrets (provided usually by a parent chart like testkube-enterprise)
  imagePullSecrets: []
  # -- Global image registry to be prepended for to all images (usually defined in parent chart)
  imageRegistry: ""
  ingress:
    # -- Global toggle whether to create Ingress resources
    enabled: true
  # -- Common labels which will be added to all resources
  labels: {}
  # -- Global security Context for all containers
  containerSecurityContext: {}
  # -- Global security Context for all pods
  podSecurityContext: {}
replicaCount: 1
# -- Topology spread constraints can be used to define how pods should be spread across failure domains within your cluster.
topologySpreadConstraints: []
# -- Priority class name defines the priority of this pod relative to others in the cluster.
priorityClassName: ""
sentry:
  # -- Toggle whether to enable Sentry.io error reporting
  enabled: false
  # -- Sentry.io secret ref (secret must contain key SENTRY_URL) (default is `testkube-cloud-sentry-secret`)
  secretRef: ""
  # -- Sentry.io authenticated URL
  url: ""
image:
  # -- If defined, it will prepend the registry to the image name, if not, default docker.io will be prepended
  registry: ""
  repository: kubeshop/testkube-cloud-ui
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "2.8.4"
imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""
ui:
  # -- API Server endpoint URL
  apiServerEndpoint: ""
  # -- WebSocket Server endpoint URL
  wsServerEndpoint: ""
  # -- The URL on which UI is served
  rootRoute: ""
  # -- Auth strategy to use (possible values: "" (default), "gitlab", "github"), setting to "" enables all auth strategies
  authStrategy: ""
  segment:
    # -- Segment.io write key secret ref (secret must contain key SEGMENTIO_WRITE_KEY_UI) (default is `testkube-cloud-analytics-secret`)
    secretRef: ""
    # -- Segment.io write key (overriden by `secretRef` if set)
    writeKey: ""
  # -- Force disabling telemetry on the UI
  disableTelemetry: false
ai:
  # -- Enable Testkube AI features
  enabled: false
  # -- Testkube AI service API URI
  aiServiceApiUri: ""
additionalEnv: {}
externalSecrets:
  enabled: false
  refreshInterval: 5m
  clusterSecretStoreName: secret-store
  keys: {}
serviceAccount:
  # -- Toggle whether to create ServiceAccount resource
  create: false
  # -- Additional labels to add to the ServiceAccount resource
  labels: {}
  # -- Additional annotations to add to the ServiceAccount resource
  annotations: {}
  # -- The name of the ServiceAccount to use. If not set and create is true, a name is generated using the fullname template
  name: ""
podAnnotations: {}
# -- Pod Security Context
podSecurityContext: {}
# fsGroup: 2000
# -- Container Security Context
securityContext:
  readOnlyRootFilesystem: true
service:
  type: ClusterIP
  port: 8080
ingress:
  # -- Toggle whether to create Ingress resource
  enabled: true
  # -- Ingress class (NGINX Controller is the only officially supported Ingress controller)
  className: "nginx"
  # -- Name of the TLS secret which contains the certificate files
  tlsSecretName: testkube-cloud-ui-tls
  # -- Additional Ingress labels
  labels: {}
  # -- Additional Ingress annotations
  annotations: {}
  # kubernetes.io/ingress.class: nginx
  # kubernetes.io/tls-acme: "true"
  tls:
    # -- TLS provider (possible values: "", "cert-manager")
    provider: "cert-manager"
  # -- Hostname for which to create rules and TLS certificates
  host: ""
# -- Toggle whether to enable redirect Ingress which allows having a different subdomain redirecting to the actual Dashboard UI Ingress URL
ingressRedirect:
  enabled: false
  annotations: {}
  labels: {}
resources:
  requests:
    cpu: 50m
    memory: 64Mi
  limits:
    cpu: 150m
    memory: 128Mi
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 10
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80
nodeSelector: {}
tolerations: []
affinity: {}
##Test Connection pod
testConnection:
  enabled: false
