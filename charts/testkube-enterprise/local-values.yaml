# Values for local installation of testkube-enterprise.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

global:
  # -- Run Testkube in enterprise mode (enables enterprise features)
  enterpriseMode: true
  # -- Enterprise License key
  enterpriseLicenseKey: ""
  # -- Base64-encoded Enterprise License file
  enterpriseLicenseFile: ""
  # -- Enterprise License file secret ref (secret should contain a file called 'license.lic')
  enterpriseLicenseSecretRef: "testkube-enterprise-license"
  # -- Toggle whether to enable offline license activation in Enterprise mode
  enterpriseOfflineAccess: false
  # -- Domain under which to create Ingress rules
  domain: ""
  # -- UI subdomain which get prepended to the domain
  uiSubdomain: "dashboard"
  # -- Different UI subdomain which gets prepended to the domain. May be used for the redirect from your actual uiSubdomain endpoint. Works is ingressRedirect option is enabled.
  redirectSubdomain: "app"
  # -- REST API subdomain which get prepended to the domain
  restApiSubdomain: "api"
  # -- gRPC API subdomain which get prepended to the domain
  grpcApiSubdomain: "agent"
  # -- Websocket API subdomain which get prepended to the domain
  websocketApiSubdomain: "websockets"
  # -- Status Pages API subdomain which get prepended to the domain
  statusPagesApiSubdomain: "status"
  # -- Storage API subdomain which get prepended to the domain
  storageApiSubdomain: "storage"
  # -- TLS certificate provider. Set to "cert-manager" for integration with cert-manager or leave empty for other methods
  certificateProvider: ""
  certManager:
    # -- Certificate Issuer ref (only used if `provider` is set to `cert-manager`)
    issuerRef: ""
  # -- Image pull secrets to use for testkube-cloud-api and testkube-cloud-ui
  imagePullSecrets: []
  ingress:
    # -- Global toggle whether to create Ingress resources
    enabled: false
  dex:
    # -- Global Dex issuer url which is configured both in Dex and API
    issuer: http://localhost:5556
minio:
  # -- To
  enabled: true
  fullnameOverride: &minioFullnameOverride testkube-enterprise-minio
  # Uncomment if you want to provide different image settings
  # image:
  # registry: docker.io
  # repository: bitnami/minio
  # tag: 2023.11.20-debian-11-r0
  # digest: ""
  # pullPolicy: IfNotPresent
  # Uncomment if you want to provide different client image settings
  # clientImage:
  # registry: docker.io
  # repository: bitnami/minio-client
  # tag: 2023.11.20-debian-11-r0
  # digest: ""
  auth:
    # -- MinIO root username (access key)
    rootUser: &minioRootUser "testkube-enterprise"
    # -- MinIO root password (secret key)
    rootPassword: &minioRootPassword "t3stkub3-3nt3rpr1s3"
    # -- Use existing secret for credentials details (`auth.rootUser` and `auth.rootPassword` will be ignored and picked up from this secret). The secret has to contain the keys `root-user` and `root-password`)
    existingSecret: &minioExistingSecret ""
  tls:
    # -- Enable tls in front of the container
    enabled: false
    # -- Generate automatically self-signed TLS certificates
    autoGenerated: false
    # -- Name of an existing secret holding the certificate information
    existingSecret: ""
  # -- Disable MinIO Web UI
  disableWebUI: false
  extraEnvVars: []
  #  - name: FOO
  #    value: "bar"

  # -- Node labels for pod assignment.
  nodeSelector: {}
  # ref: https://cloud.google.com/kubernetes-engine/docs/how-to/prepare-arm-workloads-for-deployment#node-affinity-multi-arch-arm
  # -- Tolerations to schedule a workload to nodes with any architecture type. Required for deployment to GKE cluster.
  tolerations: []
  # ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
  # Note: podAffinityPreset, podAntiAffinityPreset, and nodeAffinityPreset will be ignored when it's set
  # -- Affinity for pod assignment.
  affinity: {}
  # MinIO Pod Security Context
  podSecurityContext:
    # -- Toggle whether to render the pod security context
    enabled: true
    fsGroup: 1001
  # MinIO container security context
  containerSecurityContext:
    # -- Toggle whether to render the container security context
    enabled: true
    runAsUser: 1001
    runAsNonRoot: true
    privileged: false
    readOnlyRootFilesystem: false
    allowPrivilegeEscalation: false
    capabilities:
      drop: ["ALL"]
    seccompProfile:
      type: "RuntimeDefault"
  metrics:
    serviceMonitor:
      # -- Toggle whether to create ServiceMonitor resource for scraping metrics using Prometheus Operator
      enabled: false
  customIngress:
    # -- Toggle whether to enable the MinIO Ingress
    enabled: false
    # -- Additional labels to add to the MinIO Ingress resource
    labels: {}
    # -- Additional annotations to add to the MinIO Ingress resource
    annotations: {}
    # -- Hostname for which to create rules and TLS certificates (if omitted, the host will be generated using the global subdomain and `domain` values)
    host: ""
    # -- MinIO endpoint used in the Ingress
    endpoint: *minioFullnameOverride
    # -- Ingress class name
    className: nginx
    tls:
      # -- TLS secret name which contains the certificate files
      tlsSecret: testkube-enterprise-minio-tls
## Testkube Cloud API chart parameters
testkube-cloud-api:
  fullnameOverride: testkube-enterprise-api
  image:
    repository: testkubeenterprise/testkube-enterprise-api
    tag: 1.9.10
  additionalEnv:
    OAUTH_CLI_CLIENT_ID: teskube-cloud-cli
    OAUTH_ENABLED: true
    OAUTH_SKIP_DISCOVERY: true
    OAUTH_AUTH_URL: http://localhost:5556/auth
    OAUTH_TOKEN_URL: http://testkube-enterprise-dex.testkube-enterprise.svc.cluster.local:5556/token
    OAUTH_USER_INFO_URL: http://testkube-enterprise-dex.testkube-enterprise.svc.cluster.local:5556/userinfo
    OAUTH_JWKS_URL: http://testkube-enterprise-dex.testkube-enterprise.svc.cluster.local:5556/keys
  ai:
    secretRef: ""
  api:
    # -- Configure which invitation mode to use (email|auto-accept): email uses SMTP protocol to send email invites and auto-accept immediately adds them
    inviteMode: email
    smtp:
      # -- SMTP host
      host: ""
      # -- SMTP port
      port: 587
      # -- SMTP username
      username: ""
      # -- SMTP password
      password: ""
      # -- SMTP secret ref (secret must contain key SMTP_PASSWORD), overrides password field if defined
      passwordSecretRef: ""
    tls:
      serveHTTPS: false
      certManager:
        # -- Certificate Issuer kind (only used if `provider` is set to `cert-manager`)
        issuerKind: ClusterIssuer
      tlsSecret: testkube-enterprise-api-tls
    migrations:
      # -- Toggle whether to run database migrations
      enabled: false
      # -- Toggle whether to enable pre-install & pre-upgrade hooks (should be disabled if mongo is installed using this chart)
      useHelmHooks: false
      image:
        # -- Migrations image repository
        repository: testkubeenterprise/testkube-enterprise-api-migrations
        # -- clean up finished jobs
      ttlSecondsAfterFinished: 90
    mongo:
      # -- Mongo DSN connection string
      dsn: "mongodb://testkube-enterprise-mongodb:27017"
      # -- Mongo database name
      database: "testkubeEnterpriseDB"
    nats:
      # -- NATS URI
      uri: "nats://testkube-enterprise-nats:4222"
    minio:
      # -- Define the MinIO service endpoint. Leave empty to auto-generate when using bundled MinIO. Specify if using an external MinIO service
      endpoint: "testkube-enterprise-minio:9000" #'{{ .Values.global.storageApiSubdomain }}.{{ .Values.global.domain }}'
      # -- S3 region
      region: ""
      # -- MinIO access key id
      accessKeyId: *minioRootUser
      # -- MinIO secret access key
      secretAccessKey: *minioRootPassword
      # -- MinIO token
      token: ""
      # -- Credentials secret ref (secret should contain keys: root-user, root-password, token) (default is `testkube-cloud-minio-secret`)
      credsSecretRef: *minioExistingSecret
      # -- Expiration period in days
      expirationPeriod: 0
      # -- Should be set to `true` if MinIO is exposed through HTTPS
      secure: false
    sendgrid:
      # -- Sendgrid API key
      apiKey: ""
      # -- Secret API key secret ref (secret must contain key SENDGRID_API_KEY) (default is `sendgrid-api-key`)
      secretRef: ""
    agent:
      hide: false
      # -- Agent host (without protocol) is used for building agent install commands (if blank, api will autogenerate it based on the value of `global.domain`)
      host: "testkube-enterprise-api:grpcs"
      # -- Agent port - used for building agent install commands
      port: 80
    oauth:
      # -- OAuth secret ref for OAuth configuration (secret must contain keys: OAUTH_CLIENT_ID, OAUTH_CLIENT_SECRET, OAUTH_ISSUER_URL, OAUTH_REDIRECT_URI) (default is `testkube-cloud-oauth-secret`)
      secretRef: ""
      # -- OAuth Client ID for the configured static client in Dex
      clientId: "testkube-enterprise"
      # -- OAuth Client ID for the configured static client in Dex
      clientSecret: "QWkVzs3nct6HZM5hxsPzwaZtq"
      # -- If oauth.secretRef is empty (""), then oauth.redirectUri field will be used for the OAuth redirect URI
      redirectUri: "http://localhost:8090/auth/callback"
      # -- if oauth.secretRef is empty (""), then oauth.issuerUrl field will be used for the OAuth issuer URL
      issuerUrl: ""
    dashboardAddress: "http://localhost:8080"
    apiAddress: "http://localhost:8090"
    # -- S3 bucket in which to store logs & artifacts
    outputsBucket: testkube-cloud-outputs
  prometheus:
    enabled: false
  ingress:
    className: nginx
testkube-cloud-ui:
  fullnameOverride: testkube-enterprise-ui
  ui:
    # -- Auth strategy to use (possible values: "" (default), "gitlab", "github"), setting to "" enables all auth strategies, if you use a custom Dex connector, set this to the id of the connector
    authStrategy: ""
    apiServerEndpoint: "http://localhost:8090"
    rootRoute: "http://testkube-enterprise-ui.testkube-enterprise.svc.cluster.local:8080"
  image:
    repository: testkubeenterprise/testkube-enterprise-ui
    tag: 1.7.12
  ingress:
    enabled: false
    # -- Name of the TLS secret which contains the certificate files
    tlsSecretName: testkube-enterprise-ui-tls
  # -- Toggle whether to enable redirect Ingress which allows having a different subdomain redirecting to the actual Dashboard UI Ingress URL
  ingressRedirect:
    enabled: false
testkube-logs-service:
  fullnameOverride: testkube-enterprise-logs-service
  api:
    tls:
      serveHTTPS: false
      certManager:
        # -- Certificate Issuer kind (only used if `provider` is set to `cert-manager`)
        issuerKind: ClusterIssuer
      tlsSecret: testkube-enterprise-api-tls
    mongo:
      # -- Mongo DSN connection string
      dsn: "mongodb://testkube-enterprise-mongodb:27017"
      # -- Mongo database name
      database: "testkubeEnterpriseDB"
    nats:
      # -- NATS URI
      uri: "nats://testkube-enterprise-nats:4222"
  image:
    tag: v0-20240214-145418
testkube-worker-service:
  fullnameOverride: testkube-enterprise-worker-service
  image:
    repository: testkubeenterprise/testkube-enterprise-worker-service
    tag: 1.9.1
  api:
    nats:
      # -- NATS URI
      uri: "nats://testkube-enterprise-nats.testkube-enterprise.svc.cluster.local:4222"
    minio:
      endpoint: "testkube-enterprise-minio.testkube-enterprise.svc.cluster.local:9000"
      #      accessKeyId: "minio"
      #      secretAccessKey: "minio123"
      secure: false
  additionalEnv:
    USE_MINIO: true
## NATS chart parameter
## For more configuration parameters of NATS chart please look here: https://docs.nats.io/running-a-nats-service/nats-kubernetes/helm-charts
nats:
  fullnameOverride: testkube-enterprise-nats
  # Uncomment if you want to provide a different image or pullPolicy
  # container:
  # image:
  # repository: nats
  # tag: 2.10.5-alpine
  # pullPolicy: IfNotPresent
  # registry:
  config:
    cluster:
      # -- Enable cluster mode (HA)
      enabled: true
      # -- NATS cluster replicas
      replicas: 3
    jetstream:
      enabled: true
      fileStore:
        pvc:
          enabled: true
          size: 10Gi
          storageClassName:
    # -- Merge additional fields to nats config
    # https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.24/#container-v1-core
    merge:
      max_payload: << 8MB >>
      cluster:
        name: << testkube-enterprise >>
    # -- Patch additional fields to nats config
    patch: []
  # Reloader container settings
  reloader:
    # -- Toggle whether to install Reloader
    enabled: true
    # Uncomment if you want to provide a different image or pullPolicy
    # image:
    # repository: natsio/nats-server-config-reloader
    # tag: 0.13.0
    # pullPolicy:
    # registry:

    # -- Map of additional env vars
    env: {}
    # -- Merge additional fields to the container
    # https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.24/#container-v1-core
    merge: {}
    # -- Patch additional fields to the container
    patch: []
  # NATS Box container settings
  natsBox:
    enabled: true
    # Uncomment if you want to provide a different image or pullPolicy
    # container:
    # image:
    # repository: natsio/nats-box
    # tag: 0.14.1
    # pullPolicy:
    # registry:

    # -- Map of additional env vars
    env: {}
    # -- Merge additional fields to the container
    # https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.24/#container-v1-core
    merge: {}
    # -- Patch additional fields to the container
    patch: []
  # Exporter container settings
  promExporter:
    # -- Toggle whether to install NATS exporter
    enabled: true
    # Uncomment if you want to provide a different image or pullPolicy
    # image:
    # repository: natsio/prometheus-nats-exporter
    # tag: 0.12.0
    # pullPolicy:
    # registry:

    # -- Map of additional env vars
    env: {}
    # -- Merge additional fields to the container
    # https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.24/#container-v1-core
    merge: {}
    # -- Patch additional fields to the container
    patch: []
## MongoDB chart parameters
## For more configuration parameters of MongoDB chart please look here: https://github.com/bitnami/charts/tree/master/bitnami/mongodb#parameters
mongodb:
  # -- Toggle whether to install MongoDB
  enabled: true
  # Uncomment if you want to provide different image settings
  image:
    registry: docker.io
    repository: zcube/bitnami-compat-mongodb
    tag: 6.0.5
  # image:
  # registry: docker.io
  # repository: bitnami/mongodb
  # tag: 7.0.3-debian-11-r6
  # digest: ""

  # -- MongoDB fullname override
  fullnameOverride: "testkube-enterprise-mongodb"
  # MongoDB Auth settings
  auth:
    # -- Toggle whether to enable MongoDB authentication
    enabled: false
    # rootPassword: "123DefaultOne321"
  # -- MongoDB resource settings
  resources:
    requests:
      cpu: 150m
      memory: 128Mi
  tolerations: []
  # ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
  # -- MongoDB Pod Security Context
  podSecurityContext: {}
  # For OpenShift clusters use the following settings:
  #  fsGroup: 1000670000

  # ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
  # -- Security Context for MongoDB container
  containerSecurityContext: {}
  # For OpenShift clusters use the following settings:
  #  runAsGroup: 1000670000
## Dex chart parameters
## For more configuration parameters of NATS chart please look here: https://github.com/dexidp/helm-charts
dex:
  # -- Toggle whether to install Dex
  enabled: true
  fullnameOverride: testkube-enterprise-dex
  # Uncomment if you want to provide different image settings
  # image:
  # repository: ghcr.io/dexidp/dex
  # tag: v2.36.0-alpine
  # pullPolicy: IfNotPresent
  rbac:
    # -- Specifies whether RBAC resources should be created.
    # If disabled, the operator is responsible for creating the necessary resources based on the templates.
    create: true
    # -- Specifies which RBAC resources should be created.
    # If disabled, the operator is responsible for creating the necessary resources (ClusterRole and RoleBinding or CRD's)
    createClusterScoped: true
  configSecret:
    # -- This should be set to `false` so Dex does not create the config secret. Refer to the `createCustom` field for more info on creating config secret.
    create: false
    # -- Toggle whether to create a custom config secret for Dex (templates/dex-config-secret.yaml). If set to `true`, the `configTemplate` field will be used to generate the config secret.
    createCustom: true
    # -- The name of the secret to mount as configuration in the pod. Set `createCustom: false` and edit the secret manually to use a custom config secret.
    name: "testkube-enterprise-dex-config"
  # -- Configure backend for Dex internal config (more info here https://dexidp.io/docs/storage)
  storage:
    type: memory
  # example config for saving Dex internal data as Kubernetes CRDs
  # type: kubernetes
  # config:
  # inCluster: true
  # -- Inline Dex configuration which will be used to generate the config secret.
  configTemplate:
    # -- If provided, it will completely override the default config (`base` and `additionalConfig`). This is useful if you want to use a custom config file.
    customConfig: ""
    base: |
      logger:
        level: debug
        format: json
      web:
        http: 0.0.0.0:5556
      expiry:
        deviceRequests: "5m"
        signingKeys: "6h"
        idTokens: "24h"
        refreshTokens:
          disableRotation: false
          reuseInterval: "3s"
          validIfNotUsedFor: "2160h" # 90 days
          absoluteLifetime: "3960h" # 165 days
      oauth2:
        responseTypes: ["code"]
        skipApprovalScreen: true
        alwaysShowLoginScreen: false
        passwordConnector: local
    # -- Additional static clients which will be appended to the dex staticClients config
    additionalStaticClients: []
    #  - id: testkube-cloud-local
    #    name: Testkube Cloud - localdev
    #    redirectURIs:
    #      - http://localhost:8090/auth/callback
    #    secret: some-secret
    # -- Additional config which will be appended to the config like `staticClients`, `staticPasswords ,`connectors`...
    additionalConfig: |
      enablePasswordDB: true
      staticPasswords:
        - email: "admin@example.com"
          # bcrypt hash of the string "password": $(echo password | htpasswd -BinC 10 admin | cut -d: -f2)
          hash: "$2a$10$2b2cU8CPhOTaGrs1HRQuAueS7JTT5ZHsHSzYiFPm1leZck7Mc8T4W"
          username: "admin"
          userID: "08a8684b-db88-4b73-90a9-3cd1661f5466"
  # ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
  # -- Security Context for MongoDB container
  securityContext: {}
  # ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
  # -- MongoDB Pod Security Context
  podSecurityContext:
  resources:
    requests:
      cpu: 100m
      memory: 128Mi
    limits: {}
  ingress:
    # -- Toggle whether to enable ingress for Dex
    enabled: false
    # -- Additional annotations for Dex ingress
    annotations: {}
    # -- Testkube Enterprise supports only NGINX Controller currently
    className: nginx
    hosts:
      - host: "{{ .Values.global.restApiSubdomain }}.{{ .Values.global.domain }}"
        paths:
          - path: /idp
            pathType: Prefix
    tls:
      - secretName: testkube-enterprise-api-tls
        hosts:
          - "{{ .Values.global.restApiSubdomain }}.{{ .Values.global.domain }}"
