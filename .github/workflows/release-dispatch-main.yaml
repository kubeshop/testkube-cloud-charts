#name: Release Helm Chart - dispatch
#
#on:
#  repository_dispatch:
#    types: [trigger-workflow-testkube-cloud-api-main, trigger-workflow-testkube-cloud-ui-main]
#
#jobs:
#  release-helm-charts:
#    name: Release Helm Charts
#    runs-on: ubuntu-22.04
#    permissions:
#      contents: write
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v4
#        with:
#          ref: main
#
#      - name: Install yq
#        uses: mikefarah/yq@v4
#
#      - name: Install Helm
#        uses: azure/setup-helm@v3
#
#      - name: Update Helm chart
#        run: |
#          git config --global user.name "testkube-cloud-ci-bot"
#          git config --global user.email "testkube-cloud-ci-bot@users.noreply.github.com"
#
#          # update application version
#          ./scripts/update.sh                                \
#            -c ${{ github.event.client_payload.app }}        \
#            -a ${{ github.event.client_payload.appVersion }} \
#            --verbose
#
#          echo -e "### ${{ github.event.client_payload.app }} Helm chart diff" >> $GITHUB_STEP_SUMMARY
#          echo -e '```' >> $GITHUB_STEP_SUMMARY
#          git --no-pager diff >> $GITHUB_STEP_SUMMARY
#          echo -e '```' >> $GITHUB_STEP_SUMMARY
#
#          # update helm chart version
#          new_chart_version=$(./scripts/update.sh -c ${{ github.event.client_payload.app }} --print-chart-version)
#          echo "CHART_VERSION=$new_chart_version" >> $GITHUB_ENV
#
#      - name: Update Testkube Enterprise Helm chart
#        run: |
#          echo "Syncing subchart versions in testkube-enterprise Helm chart"
#          ./scripts/sync.sh
#
#          echo "Bumping testkube-enterprise Helm-chart version"
#          ./scripts/update.sh -c testkube-enterprise --strategy patch
#
#          enterprise_chart_version=$(./scripts/update.sh -c testkube-enterprise --print-chart-version)
#          echo "ENTERPRISE_CHART_VERSION=$enterprise_chart_version" >> $GITHUB_ENV
#
#      - name: Lint Helm charts for safety
#        run: |
#          helm lint charts/testkube-cloud-ui
#          helm lint charts/testkube-cloud-api
#          helm lint charts/testkube-enterprise
#
#      - name: Install Helm Docs
#        uses: envoy/install-helm-docs@v1.0.0
#        with:
#          version: 1.11.0
#
#      - name: Update Helm Docs
#        run: |
#          set -ex
#          helm-docs
#
#      - name: Add a release asset
#        run: |
#          if [[ "${{ github.event.client_payload.app }}" == "testkube-cloud-api" ]]; then
#            release_asset="testkube-cloud-api"
#            asset_chart_version=$(./scripts/update.sh -c testkube-cloud-api --print-chart-version)
#            echo "RELEASE_ASSET=$release_asset" >> $GITHUB_ENV
#            echo "ASSET_CHART_VERSION=$asset_chart_version" >> $GITHUB_ENV
#
#            helm package charts/testkube-cloud-api --destination archives
#
#          elif [[ "${{ github.event.client_payload.app }}" == "testkube-cloud-ui" ]]; then
#            release_asset="testkube-cloud-ui"
#            asset_chart_version=$(./scripts/update.sh -c testkube-cloud-ui --print-chart-version)
#            echo "RELEASE_ASSET=$release_asset" >> $GITHUB_ENV
#            echo "ASSET_CHART_VERSION=$asset_chart_version" >> $GITHUB_ENV
#
#            helm package charts/testkube-cloud-ui --destination archives
#
#          else
#            echo "Unknown app: ${{ github.event.client_payload.app }}"
#            exit 1
#          fi
#
#      - name: Package charts & update Helm repo index
#        run: |
#          echo "Packaging ${{ github.event.client_payload.app }} chart"
#          helm package charts/testkube-cloud-api --destination archives
#
#          echo "Packaging testkube-enterprise chart"
#          helm package charts/testkube-enterprise --destination archives
#
#          helm repo index .
#
#      - name: Commit & push changes
#        run: |
#          git add **/*Chart.yaml **/*README.md **/*values.yaml archives/*.tgz
#          git commit -m "updating chart ${{ github.event.client_payload.app }} version to "${{ env.CHART_VERSION }}" and appVersion to ${{ github.event.client_payload.appVersion }}; Updating testkube-enterprise chart version to ${{ env.ENTERPRISE_CHART_VERSION }}."
#          git push
#
#      - name: Bump version and push tag
#        id: tag
#        uses: anothrNick/github-tag-action@1.64.0
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#          WITH_V: true
#          DEFAULT_BUMP: patch
#
#      - name: Changelog
#        uses: scottbrenner/generate-changelog-action@master
#        id: changelog
#
#      - name: Create a GitHub release for the app
#        uses: ncipollo/release-action@v1
#        with:
#          tag: ${{ steps.tag.outputs.new_tag }}
#          name: ${{ steps.tag.outputs.new_tag }}
#          body: ${{ steps.changelog.outputs.changelog }}
#          artifacts: |
#            archives/${{ github.event.client_payload.app }}-${{ env.CHART_VERSION }}.tgz
#            archives/testkube-enterprise-${{ env.ENTERPRISE_CHART_VERSION }}.tgz
#            archives/${{ env.RELEASE_ASSET }}-${{ env.ASSET_CHART_VERSION }}.tgz
#
#      - name: Release to Keygen
#        uses: getgrit/keygen-action@main
#        with:
#          # Required: Keygen Account ID or slug
#          account-id: "${{ secrets.KEYGEN_ACCOUNT_ID }}"
#          # Required: A Product or User Token (ref. https://keygen.sh/docs/api/authentication/#token-authentication)
#          token: "${{ secrets.KEYGEN_TESTKUBE_ENTERPRISE_PRODUCT_TOKEN }}"
#          # Required: Product ID
#          product-id: "${{ secrets.KEYGEN_TESTKUBE_ENTERPRISE_PRODUCT_ID }}"
#          # Required (boolean): true to publish the created release; false to keep it in the DRAFT state.
#          release-publish: true
#          # Optional
#          release-name: 'Testkube Enterprise v${{ env.ENTERPRISE_CHART_VERSION }}'
#          # Required: must be a valid semver value, without the `v` prefix
#          release-version: '${{ env.ENTERPRISE_CHART_VERSION }}'
#          # Required
#          release-channel: 'stable'
#          # Optional
#          release-tag: 'latest'
#          artifacts-json: |
#            [
#              {
#                "filepath": "./archives/testkube-enterprise-${{ env.ENTERPRISE_CHART_VERSION }}.tgz",
#                "platform": "linux",
#                "arch": "amd64"
#              }
#            ]
